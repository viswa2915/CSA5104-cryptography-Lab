def mod_inverse(a, m):
    a = a % m
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

def decrypt_affine(ciphertext, a, b):
    a_inv = mod_inverse(a, 26)
    if a_inv is None:
        return None
    plaintext = ""
    for ch in ciphertext:
        if ch.isalpha():
            ch_val = ord(ch.upper()) - ord('A')
            plain_val = (a_inv * (ch_val - b)) % 26
            plaintext += chr(plain_val + ord('A'))
        else:
            plaintext += ch
    return plaintext

ciphertext = "B..." 
most_freq_cipher = 'B'
second_freq_cipher = 'U'
most_freq_plain = 'E'
second_freq_plain = 'T'

y1 = ord(most_freq_cipher) - ord('A')
y2 = ord(second_freq_cipher) - ord('A')
x1 = ord(most_freq_plain) - ord('A')
x2 = ord(second_freq_plain) - ord('A')

dx = (x1 - x2) % 26
dy = (y1 - y2) % 26

a_inv = mod_inverse(dx, 26)
if a_inv is None:
    print("No solution for a found!")
else:
    a = (dy * a_inv) % 26
    b = (y1 - a * x1) % 26
    print(f"a = {a}, b = {b}")
    decrypted_text = decrypt_affine(ciphertext, a, b)
    print("Decrypted Text:", decrypted_text)
